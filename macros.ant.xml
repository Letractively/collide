<project name="macros">
  <!-- Ensure dirs.root has been set by the actual build.xml file -->
  <fail message="project build.xml must set property dirs.root!"
	unless="dirs.root"/>

  <!-- Ensure Vert.x-compatible java version -->
  <condition property="java.version.ok">
    <or>
      <matches string="${java.version}" pattern="^1\.[789]"/>
      <matches string="${java.version}" pattern="^1\.[0-9][0-9]"/>
      <matches string="${java.version}" pattern="^[2-9]\."/>
    </or>
  </condition>
  <fail message="vert.x requires Java 1.7, you have ${java.version}"
      unless="java.version.ok"/>

  <!-- Load properties, first from local overrides and then from normal/default
       values.  First set wins. -->
  <property file="${dirs.root}/local.properties"/>
  <property file="${dirs.root}/build.properties"/>


  <!-- load ant-contrib from the ant install dir, for <outofdate> -->
  <taskdef classpath="${dirs.lib}/ant-contrib-${libs.antcontrib}/ant-contrib-${libs.antcontrib}.jar"
	   resource="net/sf/antcontrib/antlib.xml"
	   onerror="fail"/>


  <!-- Classpaths for various contexts -->
  <path id="paths.shared">
    <pathelement location="${dirs.lib}/gson-${libs.gson}/gson-${libs.gson}.jar"/>
    <pathelement location="${dirs.lib}/guava-${libs.guava}/guava-${libs.guava}.jar"/>
    <pathelement location="${dirs.lib}/jsr-305/jsr305.jar"/>
    <pathelement location="${dirs.lib}/gwt-${libs.gwt}/gwt-user.jar"/>
    <pathelement location="${dirs.lib}/wave-${libs.wave}/waveinabox-import-0.3.jar"/>
  </path>

  <path id="paths.client.build">
    <path refid="paths.shared"/>
    <pathelement location="${dirs.lib}/guava-${libs.guava}/guava-gwt-${libs.guava}.jar"/>
    <pathelement location="${dirs.lib}/elemental/elemental.jar"/>
    <pathelement location="${dirs.lib}/wave-${libs.wave}/client-src.jar"/>
    <pathelement location="${dirs.lib}/wave-${libs.wave}/client-common-src.jar"/>
    <pathelement location="${dirs.lib}/wave-${libs.wave}/client-scheduler-src.jar"/>
    <pathelement location="${dirs.lib}/wave-${libs.wave}/common-src.jar"/>
    <pathelement location="${dirs.lib}/wave-${libs.wave}/concurrencycontrol-src.jar"/>
    <pathelement location="${dirs.lib}/wave-${libs.wave}/model-src.jar"/>
    <pathelement location="${dirs.lib}/wave-${libs.wave}/media-src.jar"/>
    <pathelement location="${dirs.lib}/wave-${libs.wave}/util-src.jar"/>
  </path>

  <path id="paths.client.runtime">
    <path refid="paths.client.build"/>
    <pathelement location="${dirs.lib}/gwt-${libs.gwt}/gwt-dev.jar"/>
  </path>

  <path id="paths.server.build">
    <path refid="paths.shared"/>
    <pathelement location="${dirs.vertx}/lib/jars/vert.x-core.jar"/>
    <pathelement location="${dirs.vertx}/lib/jars/vert.x-platform.jar"/>
    <pathelement location="${dirs.vertx}/lib/jars/netty.jar"/>
    <pathelement location="${dirs.lib}/jgit-${libs.jgit}/org.eclipse.jgit-${libs.jgit}.jar"/>
  </path>

  <path id="paths.server.runtime">
    <path refid="paths.shared"/>
    <pathelement location="${dirs.lib}/jgit-${libs.jgit}/org.eclipse.jgit-${libs.jgit}.jar"/>
  </path>

  <path id="paths.test">
    <pathelement location="${dirs.bin}"/>
    <pathelement
      location="${dirs.lib}/junit-${libs.junit}/junit-${libs.junit}.jar"/>
    <pathelement
      location="${dirs.lib}/easymock-${libs.easymock}/easymock-${libs.easymock}.jar"/>
  </path>


  <!-- Macros for common operations -->
  <macrodef name="do.javac" description="Run javac task with common options">
    <attribute name="srcdir" default="${dirs.src}" description="Source root"/>
    <attribute name="destdir" default="${dirs.bin}" description="Output root"/>
    <element name="nested" implicit="true"/>
    <sequential>
      <mkdir dir="@{destdir}"/>
      <javac srcdir="@{srcdir}" destdir="@{destdir}"
             compiler="${javac.compiler}" debug="${javac.debug}"
             deprecation="${javac.deprecation}"
             includeAntRuntime="false" fork="yes">
        <nested/>
      </javac>
    </sequential>
  </macrodef>

  <macrodef name="do.junit" description="Run junit task with common options">
    <attribute name="reportdir" description="subdirectory for reports"/>
    <attribute name="debugport" default="${junit.debugport}"/>
    <attribute name="debugwait" default="${junit.debugwait}"/>
    <element name="testpackages"/>
    <element name="libraries"/>
    <element name="jvmargs" optional="true"/>
    <sequential>
      <mkdir dir="${dirs.testrpt}/@{reportdir}"/>
      <junit printsummary="${junit.summaries}" forkmode="${junit.forkmode}"
	     fork="yes" haltonerror="false" errorproperty="junit.test.error"
             haltonfailure="false" failureproperty="junit.test.failed"
             timeout="${junit.timeout}" logfailedtests="true">
<!-- is there a way to make this on only if we need it?  Else we get too much
     "Listening for transport dt_socket at address: ..." spam.
        <jvmarg line="-agentlib:jdwp=transport=dt_socket,server=y,address=@{debugport},suspend=@{debugwait}"/>
  -->
        <jvmarg line="-Dgwt.args='-war ${dirs.gwtwork}/junit-war'"/>
        <jvmargs/>
        <classpath>
          <pathelement path="${dirs.bin}"/>
          <pathelement path="${dirs.testbin}"/>
          <libraries/>
          <path refid="paths.test"/>
          <pathelement path="${dirs.src}"/>
          <pathelement path="${dirs.test}"/>
        </classpath>
        <formatter type="plain"/>
        <formatter type="xml"/>
        <batchtest todir="${dirs.testrpt}/@{reportdir}">
          <testpackages/>
        </batchtest>
      </junit>
      <!-- We use false for halton{error,failure} above so all tests will run,
           and use these "fail" tasks to stop and error out after the test
           batch is done overall. -->
      <fail status="2" if="junit.test.failed"
	    message="At least one test failed"/>
      <fail status="3" if="junit.test.error"
	    message="At least one test had errors"/>
    </sequential>
  </macrodef>

  <macrodef name="gwt.compile" description="run GWT compiler">
    <attribute name="outdir" description="GWT output directory"/>
    <attribute name="extradir" default="@{outdir}/../extras"
        description="GWT extras output directory"/>
    <attribute name="style" default="OBFUSCATED"
        description="GWT compilation mode"/>
    <attribute name="workers" default="1"
        description="Permutation compiler threads"/>
    <attribute name="maxmem" default="512M" description="Max JVM memory size"/>
    <attribute name="maxstack" default="512K"
        description="Max JVM thread stack size"/>
    <attribute name="module"
        description="GWT module to compile, as full-qualified class name"/>
    <attribute name="renamed" default="@{module}"
        description="output name of GWT module, if rename-to is used"/>
    <attribute name="gwtflags" default=""/>
    <attribute name="debugport" default="${gwtc.debugport}"/>
    <attribute name="debugwait" default="${gwtc.debugwait}"/>
    <element name="sources" optional="false"
        description="source files for freshness checks"/>
    <element name="srcroots" optional="false"
        description="GWT source directories for classpath"/>
    <element name="libs" optional="true"
        description="library files for GWT compiler classpath"/>
    <sequential>
      <outofdate>
        <sourcefiles>
          <sources/>
        </sourcefiles>
        <targetfiles>
          <fileset dir="@{outdir}/@{renamed}" erroronmissingdir="false">
            <include name="*.nocache.js"/>
          </fileset>
        </targetfiles>
        <sequential>
          <!-- Start by deleting old dirt, so e.g. old permutations don't
               build up. -->
          <delete dir="@{outdir}"/>
          <mkdir dir="@{outdir}"/>
          <condition property="gwtc.jvmdebug"
            value=""
            else="-agentlib:jdwp=transport=dt_socket,server=y,address=@{debugport},suspend=@{debugwait}">
            <equals arg1="@{debugport}" arg2=""/>
          </condition>
          <java classname="com.google.gwt.dev.Compiler"
              fork="true" failonerror="true">
            <classpath>
              <srcroots/>
              <pathelement location="${dirs.bin}"/>
              <path refid="paths.client.build"/>
              <libs/>
              <pathelement location="${dirs.lib}/gwt-${libs.gwt}/gwt-dev.jar"/>
            </classpath>
            <jvmarg value="-Xmx@{maxmem}"/>
            <jvmarg value="-Xss@{maxstack}"/>
            <jvmarg line="${gwtc.jvmdebug}"/>
            <arg value="-war"/>
            <arg file="@{outdir}"/>
            <arg value="-extra"/>
            <arg file="@{extradir}"/>
            <arg value="-style"/>
            <arg value="@{style}"/>
            <arg value="-localWorkers"/>
            <arg value="@{workers}"/>
            <arg line="@{gwtflags}"/>
            <arg value="@{module}"/>
          </java>
        </sequential>
      </outofdate>
    </sequential>
  </macrodef>

  <macrodef name="gwt.devmode" description="run GWT dev mode">
    <attribute name="outdir" description="GWT output directory"/>
    <attribute name="extradir" default="@{outdir}/../extras"
        description="GWT extras output directory"/>
    <attribute name="maxmem" default="512M" description="Max JVM memory size"/>
    <attribute name="maxstack" default="512K"
        description="Max JVM thread stack size"/>
    <attribute name="startupUrl"
        description="The startup URL"/>
    <attribute name="module"
        description="GWT module to compile, as full-qualified class name"/>
    <attribute name="gwtflags" default=""/>
    <attribute name="debugport" default="${devmode.debugport}"/>
    <attribute name="debugwait" default="${devmode.debugwait}"/>
    <element name="sources" optional="false"
         description="source files for freshness checks"/>
    <element name="srcroots" optional="false"
         description="GWT source directories for classpath"/>
    <element name="libs" optional="true"
         description="library files for GWT compiler classpath"/>
    <sequential>
    	<condition property="devmode.jvmdebug"
          value=""
          else="-agentlib:jdwp=transport=dt_socket,server=y,address=@{debugport},suspend=@{debugwait}">
          <equals arg1="@{debugport}" arg2=""/>
    	</condition>
      <java classname="com.google.gwt.dev.DevMode"
              fork="true" failonerror="true">
        <classpath>
          <srcroots/>
          <pathelement location="${dirs.bin}"/>
          <path refid="paths.client.build"/>
          <libs/>
          <pathelement location="${dirs.lib}/gwt-${libs.gwt}/gwt-dev.jar"/>
        </classpath>
        <jvmarg value="-Xmx@{maxmem}"/>
        <jvmarg value="-Xss@{maxstack}"/>
        <jvmarg line="${devmode.jvmdebug}"/>
        <arg value="-war"/>
        <arg file="@{outdir}"/>
        <arg value="-extra"/>
        <arg file="@{extradir}"/>
        <arg value="-startupUrl"/>
        <arg value="@{startupUrl}"/>
        <arg line="@{gwtflags}"/>
        <arg value="@{module}"/>
      </java>
    </sequential>
  </macrodef>

  <!-- Build targets that are totally the same for all sub-projects -->
  <target name="clean" description="Erase all built artifacts">
    <delete dir="${dirs.out}"/>
  </target>

</project>
